@page "/hours"
@rendermode InteractiveServer

@inject EmployeeService EmpService;

<PageTitle>Hours</PageTitle>

<h1>Hours</h1>

@if (showEditForm)
{
    <EditForm Model="editingEmployee" OnValidSubmit="ModifyHours">
        <div class="mb-3">
            <label>Employee ID:</label>
            <p>@editingEmployee.EmployeeId</p>
        </div>
        <div class="mb-3">
            <label>Name:</label>
            <p>@editingEmployee.FirstName @editingEmployee.LastName</p>
        </div>

        <div class="mb-3">
            <label>Hours:</label>
            <InputNumber class="form-control" @bind-Value="editingEmployee.Hours" />
        </div>
        <button class="btn btn-warning" type="submit">Update</button> 
        <button type="button" class="btn btn-secondary" @onclick="HideEditForm">Cancel</button>
    </EditForm>
}

@if (showForm)
{
    <EditForm Model="EmpService.newHours" OnValidSubmit="AddHours">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Employee ID</label>
            <InputSelect class="form-control" @bind-Value="EmpService.newHours.employeeId">
                <option value="">-- Select Employee --</option>
                @foreach (var employee in employees)
                {
                    <option value="@employee.EmployeeId">@employee.FirstName @employee.LastName (@employee.EmployeeId)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label>Hours:</label>
            <InputNumber class="form-control" @bind-Value="EmpService.newHours.hours" />
        </div>

        <button type="submit" class="btn btn-success">Submit</button>
        <button type="button" class="btn btn-secondary" @onclick="HideForm">Cancel</button>
    </EditForm>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="ShowForm">Add Hours</button>
}

<table class="table">
    <thead>
        <tr>
            <th>Employee ID</th>
            <th>Name</th>
            <th>Hours</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in employees)
        {
            <tr>
                <td>@employee.EmployeeId</td>
                <td>@employee.FirstName @employee.LastName</td>
                <td>@employee.Hours</td>
                <td>
                    <button class="bt-img" @onclick="@(() => ModifyHoursCopy(employee))">
                        <img src="images/edit_24.png" alt="Edit" />
                    </button>

                    <button class="bt-img" @onclick="@(() => ZeroizeHours(employee))">
                        <img src="images/delete_24.png" alt="Delete" />
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool showForm = false;
    private bool showEditForm = false;
    private List<Employee> employees = new();
    private Employee editingEmployee = new();

    private async Task LoadEmployees() {
        employees = await EmpService.GetEmployeesAsync();
    }

    protected override async void OnInitialized() {
        await LoadEmployees();
    }

    private void ModifyHoursCopy(Employee employee) {
        // Copy over attributes of existing employee to pre-fill form
        editingEmployee = new Employee
        {
            EmployeeId = employee.EmployeeId,
            FirstName = employee.FirstName,
            LastName = employee.LastName,
            Address = employee.Address,
            Payrate = employee.Payrate,
            Hours = employee.Hours
        };

        showEditForm = true;
    }

    private async Task ModifyHours() {
        await EmpService.ModifyHoursAsync(editingEmployee);
        await LoadEmployees();
        HideEditForm();
    }

    private async Task ZeroizeHours(Employee employee) {
        await EmpService.ZeroizeHoursAsync(employee);
        await LoadEmployees();
    }


    private void HideForm() => showForm = false;
    private void ShowForm() => showForm = true;
    private void HideEditForm() => showEditForm = false;

    private async Task AddHours() {
        await EmpService.AddHoursAsync(EmpService.newHours.employeeId, EmpService.newHours.hours);

        HideForm();
        EmpService.newHours = new();
        StateHasChanged();
    }

}
